#include <stdio.h>

struct process {
    int allocation[3];
    int max[3];
    int need[3];
    int finish;
} p[10];

int main() {
    int n, i, j, avail[3], work[3], flag, count = 0, sequence[10], k = 0;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input allocation matrix for each process
    printf("Enter allocation matrix:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (j = 0; j < 3; j++) {
            scanf("%d", &p[i].allocation[j]);
        }
    }

    // Input max matrix for each process
    printf("Enter max matrix:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i);
        for (j = 0; j < 3; j++) {
            scanf("%d", &p[i].max[j]);
            p[i].need[j] = p[i].max[j] - p[i].allocation[j];
        }
        p[i].finish = 0;
    }

    // Input available resources
    printf("Enter available resources: ");
    for (i = 0; i < 3; i++) {
        scanf("%d", &avail[i]);
        work[i] = avail[i];
    }

    // Banker's algorithm
    while (count < n) {
        flag = 0;
        for (i = 0; i < n; i++) {
            if (p[i].finish == 0) {
                int safe = 1;
                for (j = 0; j < 3; j++) {
                    if (p[i].need[j] > work[j]) {
                        safe = 0;
                        break;
                    }
                }
                if (safe) {
                    printf("Process %d is executing\n", i);
                    sequence[k++] = i;
                    p[i].finish = 1;
                    count++;
                    flag = 1;
                    for (j = 0; j < 3; j++) {
                        work[j] += p[i].allocation[j];
                    }
                }
            }
        }
        if (!flag) {
            printf("Unsafe state: deadlock detected\n");
            break;
        }
    }

    if (count == n) {
        printf("Safe sequence:");
        for (i = 0; i < n; i++) {
            printf(" P%d", sequence[i]);
        }
        printf("\n");
    }

    return 0;
}
